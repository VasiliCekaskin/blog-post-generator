You will assist me in extending my code base.
Here is information for you to understand the project.

Folder structure:

```
total 36K
drwxr-xr-x 12 vasilicekaskin staff  384 Aug  6 15:42 .git
-rw-r--r--  1 vasilicekaskin staff   72 Aug  6 02:48 .gitignore
-rw-r--r--  1 vasilicekaskin staff  106 Aug  5 03:00 .prettierrc
-rw-r--r--  1 vasilicekaskin staff   22 Aug  5 02:11 .rspec
-rw-r--r--  1 vasilicekaskin staff   25 Aug  5 02:33 .tool-versions
drwxr-xr-x  3 vasilicekaskin staff   96 Aug  5 02:26 .vscode
-rw-r--r--  1 vasilicekaskin staff  127 Aug  6 00:39 Gemfile
-rw-r--r--  1 vasilicekaskin staff  991 Aug  6 00:39 Gemfile.lock
-rw-r--r--  1 vasilicekaskin staff   92 Aug  6 02:50 README.md
drwxr-xr-x  3 vasilicekaskin staff   96 Aug  5 02:08 bin
drwxr-xr-x  3 vasilicekaskin staff   96 Aug  5 03:10 lib
drwxr-xr-x  7 vasilicekaskin staff  224 Aug  5 02:29 node_modules
-rw-r--r--  1 vasilicekaskin staff 1.1K Aug  5 02:33 package-lock.json
-rw-r--r--  1 vasilicekaskin staff   94 Aug  5 02:26 package.json
drwxr-xr-x  4 vasilicekaskin staff  128 Aug  5 03:14 spec
```

File contents:

```
# bin/application

#!/usr/bin/env ruby

require_relative '../lib/app/blog_post_generator/main.rb'
require_relative '../lib/app/logger'

begin
  App::Logger.info('Application started')
  App::BlogPostGenerator::Main.run!
ensure
  App::Logger.info('Application stopped')
end
```

```rb
# lib/app/blog_post_generator/main.rb
require_relative '../blog_post_generator/config'
require_relative '../logger'

module App
  module BlogPostGenerator
    class Main
      class << self
        def run!
          blog_post_generator = new

          blog_post_generator.generate_blog! while true
        end
      end

      def initialize(
        blog_post_prompt: Config.blog_post_prompt,
        blog_post_writer: Config.blog_post_writer
      )
        @blog_post_prompt = blog_post_prompt
        @blog_post_writer = blog_post_writer
      end

      def generate_blog!
        generate_and_save!
      end

      private

      attr_reader :blog_post_prompt,
                  :blog_post_prompt_result_parser,
                  :blog_post_writer

      def generate_and_save!
        BlogPost.from_blog_post_prompt(blog_post_prompt:).save!(
          blog_post_writer:,
        )
      rescue StandardError => e
        Logger.error(e)
      end
    end
  end
end

require_relative '../blog_post_generator/config'
require_relative '../logger'

module App
  module BlogPostGenerator
    class Main
      class << self
        def run!
          blog_post_generator = new

          blog_post_generator.generate_blog! while true
        end
      end

      def initialize(
        blog_post_prompt: Config.blog_post_prompt,
        blog_post_writer: Config.blog_post_writer
      )
        @blog_post_prompt = blog_post_prompt
        @blog_post_writer = blog_post_writer
      end

      def generate_blog!
        generate_and_save!
      end

      private

      attr_reader :blog_post_prompt,
                  :blog_post_prompt_result_parser,
                  :blog_post_writer

      def generate_and_save!
        BlogPost.from_blog_post_prompt(blog_post_prompt:).save!(
          blog_post_writer:,
        )
      rescue StandardError => e
        Logger.error(e)
      end
    end
  end
end
```

```rb
# lib/app/blog_post_generator/config.rb

require_relative 'prompt_clients/chat_gpt'
require_relative 'blog_post_writers/disk'

require_relative 'blog_post'
require_relative 'blog_post_prompt'
require_relative 'blog_post_prompt_result'

module App
  module BlogPostGenerator
    class Config
      class << self
        def prompts_path
          @prompts_path ||= File.join(File.dirname(__FILE__), '..', 'prompts')
        end

        def openai_access_token
          'asd'
        end

        def prompt_client
          @prompt_client ||= App::PromptClients::ChatGPT
        end

        def blog_post_prompt
          @blog_post_prompt_result_prompter ||=
            App::BlogPostGenerator::BlogPostPrompt
        end

        def blog_post_writer
          @blog_post_writer ||= App::BlogPostGenerator::BlogPostWriters::Disk
        end
      end
    end
  end
end
```

```rb
# lib/app/logger.rb

module App
  class Logger
    class << self
      def info(message)
        puts "Info: |- #{message} -|"
      end

      def error(message)
        puts "Error: |!! #{message} !!|"
      end
    end
  end
end
```

```rb
# lib/app/blog_post_generator/prompt_result.rb
# A new prompt client should adhere to the same interface as the old prompt client.

module App
  module BlogPostGenerator
    class PromptResult
      def initialize(data)
        @data = data
      end

      attr_reader :data
    end
  end
end
```

```rb
# lib/app/blog_post_generator/blog_post.rb

require_relative './blog_post_prompt'

module App
  module BlogPostGenerator
    class BlogPost
      class << self
        def from_blog_post_prompt(blog_post_prompt:)
          blog_post_prompt_result = blog_post_prompt.prompt!

          from_blog_post_prompt_result(blog_post_prompt_result)
        end

        def from_blog_post_prompt_result(blog_post_prompt_result)
          new(blog_post_prompt_result.data)
        end
      end

      def initialize(data)
        @title = data[:title]
        @author = data[:author]
        @date = data[:date]
        @tags = data[:tags]
        @content = data[:content]
        @comments = data[:comments]
      end

      attr_reader :title, :author, :date, :tags, :content, :comments

      def json
        Oj.dump({ title:, author:, date:, tags:, content:, comments: })
      end

      def save!(blog_post_writer:)
        blog_post_writer.write_blog_post(blog_post: self)
      end
    end
  end
end
```

```rb
# lib/app/blog_post_generator/blog_post_prompt.rb

require_relative '../blog_post_generator/config'
require_relative '../logger'

module App
  module BlogPostGenerator
    class BlogPostPrompt
      class << self
        def prompt!
          new.prompt!
        end
      end

      def initialize(prompt_client: Config.prompt_client)
        @prompt_client = prompt_client
      end

      def prompt!
        App::Logger.info('Prompting for blog post')

        prompt = File.read("#{__dir__}/prompts/blog_post_prompt")
        prompt_result = prompt_client.prompt!(prompt:)
        BlogPostPromptResult.from_prompt_result(prompt_result)
      end

      private

      attr_reader :prompt_client
    end
  end
end
```

```rb
# lib/app/blog_post_generator/blog_post_prompt_result.rb

require 'oj'

require_relative './prompt_result'

module App
  module BlogPostGenerator
    class BlogPostPromptResult < PromptResult
      class << self
        def from_prompt_result(prompt_result)
          blog_post_prompt_result = new(prompt_result.data)
          blog_post_prompt_result.transform!
          blog_post_prompt_result
        end
      end

      def transform!
        parsed_data =
          Oj.load(@data['choices'][0]['message']['content'], symbol_keys: true)

        @data = {
          title: parsed_data[:title],
          author: parsed_data[:author],
          date: parsed_data[:date],
          tags: parsed_data[:tags],
          content: parsed_data[:content],
          comments: parsed_data[:comments],
        }
      end
    end
  end
end

```

```rb
# lib/app/blog_post_writers/disk.rb
require_relative '../../logger'

module App
  module BlogPostGenerator
    module BlogPostWriters
      class Disk
        class WriteError < StandardError
        end

        class << self
          def write_blog_post(blog_post:)
            new(blog_post: blog_post).write_blog_post
          end
        end

        def initialize(blog_post:)
          @blog_post = blog_post
        end

        attr_reader :blog_post

        def write_blog_post
          App::Logger.info('Writing new blog to disk')

          File.open("#{__dir__}/blog_posts/#{blog_post.title}", 'w') do |file|
            blog_post.json
          end

          App::Logger.info(
            "Successfully wrote new blog to disk #{__dir__}/blog_posts/#{blog_post.title}",
          )
        end
      end
    end
  end
end
```

```rb
# lib/app/prompt_clients/chat_gpt.rb

require 'openai'
require 'oj'

require_relative '../config'

module App
  module BlogPostGenerator
    module PromptClients
      class ChatGPT
        class PromptError < StandardError
        end

        class << self
          def prompt!(prompt:)
            new(prompt).prompt!
          end
        end

        def initialize(prompt)
          @prompt = prompt
        end

        attr_reader :prompt

        def prompt!
          prompt_response =
            openai_client.chat(
              parameters: {
                model: 'gpt-3.5-turbo',
                messages: [{ role: 'user', content: prompt }],
                temperature: 0.7,
              },
            )

          PromptResult.new(prompt_response)
        end

        private

        def openai_client
          @client ||=
            OpenAI::Client.new(access_token: Config.openai_access_token)
        end
      end
    end
  end
end
```

```rb
# lib/app/blog_post_generator/prompts/blog_post_prompt

You are an assistant who only speaks JSON. Do not write normal text.

This is the format you will use:

{
  "title": "Sample Blog Post Title",
  "author": "John Doe",
  "date": "2023-08-06",
  "tags": ["technology", "AI", "blogging"],
  "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit...",
  "comments": [
    {
      "username": "JaneDoe",
      "comment": "Great post! I learned a lot about AI.",
      "date": "2023-08-06"
    },
    {
      "username": "User123",
      "comment": "Thanks for sharing this valuable information.",
      "date": "2023-08-07"
    }
  ]
}

Write a full blog post about a random topic.
```

Now be my assistant and give me a nice README.md for this project.